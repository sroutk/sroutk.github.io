[{"permalink":"//","layout":"default","title":"Mixignal Innovations","content":"# Mixignal Innovations\n\nMixignal Innovations LLC provides design services from concept through production, specializing in Mixed-Signal Analog/RF Integrated Circuits(IC) design in CMOS or BiCMOS processes. The company's goal is to provide highest quality service at a competitive price. Since it's inception in 2009, the Company has delivered services which have met the specification in first pass. We provide the clients solutions ranging from turn-key type (spec to prototype) to filling any gap in the design chain including system modeling , architecture design and verification, CMOS/BiCMOS circuit design and Layout in most widely used technology nodes. \n\n- t\n\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"sort":1,"permalink":"/wiki/","layout":"default","title":"WIKI","content":"<h1 id=\"wiki\">WIKI</h1>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n\n\n- [COMPUTING &amp;amp; IT](/wiki/compute-it.html)\n- [USER GUIDES](/wiki/userguide.html)\n- [CUBE-SAT](/wiki/cube-sat.html)\n</code></pre>  </div></div>\n\n<ul>\n <li><a href=\"/wiki/compute-it.html\">COMPUTING &amp; IT</a></li>\n <li><a href=\"/wiki/userguide.html\">USER GUIDES</a></li>\n <li><a href=\"/wiki/cube-sat.html\">CUBE-SAT</a></li>\n</ul>\n","dir":"/wiki/","name":"README.md","path":"wiki/README.md","url":"/wiki/"},{"sort":1,"layout":"default","title":"COMPUTING &amp; IT","content":"<h1 id=\"computing--it\">COMPUTING &amp; IT</h1>\n\n<h2 id=\"cloud-computing-and-vms\">Cloud Computing and VMs</h2>\n\n<h3 id=\"setting-up-a-linux-vm\">Setting Up a Linux VM</h3>\n\n<p>This section details the steps to setup a <strong>Ubuntu Linode VM</strong> following the this <a href=\"https://www.linode.com/docs/guides/set-up-and-secure/\">guide</a>.</p>\n\n<ul>\n <li>Use the cloud manager to create and view the linux instance.</li>\n <li>Before accessing the instance through <strong>PuTTy</strong>, access the instance using the <em>root</em> login via the <strong>web console</strong>. <strong>NOTE</strong> Most cloud services creates an admin account for access which we will create manually in subsequent steps.</li>\n <li>Perform <strong>system updates</strong>: <code class=\"language-plaintext highlighter-rouge\">apt update &amp;&amp; apt upgrade</code></li>\n <li>Set <strong>local timezone</strong>: <code class=\"language-plaintext highlighter-rouge\">timedatectl set-timezone 'Asia/Calcutta'</code>\n <ul>\n <li>To view all timezones: <code class=\"language-plaintext highlighter-rouge\">timedatectl list-timezones</code></li>\n </ul>\n </li>\n <li>Set <strong>hostname</strong>: <code class=\"language-plaintext highlighter-rouge\">hostnamectl set-hostname &lt;hostname&gt;</code></li>\n <li>Customize <strong>prompt</strong> in <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>: <code class=\"language-plaintext highlighter-rouge\">PS1=\"\\u@\\h[\\W]\\$ \"</code>\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">\\u</code>:username, <code class=\"language-plaintext highlighter-rouge\">\\h</code>:hostname, <code class=\"language-plaintext highlighter-rouge\">\\W</code>: working directory</li>\n </ul>\n </li>\n <li>Add some essential aliases to .bashrc:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">alias date</span><span class=\"o\">=</span><span class=\"s1\">'date +%D'</span>\n<span class=\"nb\">alias </span><span class=\"nv\">h</span><span class=\"o\">=</span><span class=\"s1\">'history'</span>\n<span class=\"nb\">alias </span><span class=\"nv\">vimr</span><span class=\"o\">=</span><span class=\"s1\">'vim -R'</span>\n<span class=\"nb\">alias rm</span><span class=\"o\">=</span><span class=\"s1\">'rm -i'</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>Add the above customization to <code class=\"language-plaintext highlighter-rouge\">/etc/skel/.bashrc</code> for new users.</li>\n <li>Create an <strong>admin/sudo</strong> account:\n <ul>\n <li>Create the new user: <code class=\"language-plaintext highlighter-rouge\">adduser &lt;admin-username&gt;</code></li>\n <li>Add the new user to the sudo group: <code class=\"language-plaintext highlighter-rouge\">adduser &lt;admin-username&gt; sudo</code></li>\n <li>For other distros eg. CentOS or even Ubuntu:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">useradd &lt;adminuser&gt; &amp;&amp; passwd &lt;adminuser&gt;</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">usermod -aG wheel &lt;adminuser&gt;</code></li>\n <li>Make sure the wheel group is uncommented in <code class=\"language-plaintext highlighter-rouge\">/etc/skel</code> using the command <code class=\"language-plaintext highlighter-rouge\">#visudo</code>\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">%wheel ALL=(ALL) ALL</code> <strong>NOTE</strong> <code class=\"language-plaintext highlighter-rouge\">%</code> is NOT a comment.</li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li><strong>Install and Configure Dropbox</strong>\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo apt-get install dropbox</code></li>\n <li>Login to the user you want to use Dropbox in.</li>\n <li>Download the python script (to say <code class=\"language-plaintext highlighter-rouge\">~/bin</code>):\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">wget https://www.dropbox.com/download?dl=packages/dropbox.py</code></li>\n <li><strong>NOTE</strong> the dropbox package comes with a application name <code class=\"language-plaintext highlighter-rouge\">dropbox</code> but seems to have some outdated code so downloaded the above python script.</li>\n </ul>\n </li>\n <li>Make sure <code class=\"language-plaintext highlighter-rouge\">~/bin</code> is in the PATH.\n <ul>\n <li>eg. in <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>: <code class=\"language-plaintext highlighter-rouge\">export PATH=/home/user/bin:$PATH</code></li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">dropbox.py update</code> to update the package?</li>\n <li><code class=\"language-plaintext highlighter-rouge\">dropbox.py start</code>\n <ul>\n <li><em>First Time</em>: <code class=\"language-plaintext highlighter-rouge\">dropbox status</code> will show you a link that you browse to enter the Dropbox account credential that you want to link to.</li>\n </ul>\n </li>\n <li>Make sure everytime the VM is rebooted, you start dropbox.</li>\n <li><em>NOTE</em> If your distro’s repo does not have the packages, Check this Dropbox Links: <a href=\"https://help.dropbox.com/installs\">Installs</a>, <a href=\"https://help.dropbox.com/installs/linux-commands#add\">On Linux</a>.</li>\n </ul>\n </li>\n <li>Follow section <a href=\"wiki/compute-it.html#security-hardening-a-linux-server\">Security Hardening a Linux Server</a> for hardening access to the server.</li>\n <li><strong>Install &amp; Configure AWS CLI</strong>\n <ul>\n <li>AWS CLI is mainly used for automatic backups to AWS S3.</li>\n <li>Followed this <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html\">AWS User Guide</a>.</li>\n <li>Prereqs:\n <ul>\n <li>Setup an IAM account (instead of the root AWS) or use an existing one.</li>\n <li>Create an access ID key and secret key and store it safely. See <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-prereqs.html\">AWS Doc</a>.</li>\n </ul>\n </li>\n <li>Before installing, make sure <code class=\"language-plaintext highlighter-rouge\">glibc-tools</code>, <code class=\"language-plaintext highlighter-rouge\">groff</code> and <code class=\"language-plaintext highlighter-rouge\">less</code> are installed.</li>\n <li>Install it from AWS:\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"s2\">\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\"</span> <span class=\"nt\">-o</span> <span class=\"s2\">\"awscliv2.zip\"</span>\nunzip awscliv2.zip\n<span class=\"nb\">sudo</span> ./aws/install\n</code></pre>  </div> </div>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">aws --version</code> to check the installed package.</li>\n <li>To update the current isntallation:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update</code></li>\n </ul>\n </li>\n <li><strong>NOTE</strong> You can install <code class=\"language-plaintext highlighter-rouge\">awscli</code> package from the Ubuntu repo but lot older version.</li>\n <li><strong>Configure AWS CLI</strong> (See <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html\">AWS Doc</a>)\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">aws configure --profile user1</code> <strong>NOTE</strong> For default configuration omit the –profile option.\n <ul>\n <li>AWS Access Key ID: <Enter the=\"\" Key=\"\" ID=\"\" of=\"\" your=\"\" IAM=\"\" user=\"\"></Enter></li>\n <li>AWS Secret Access Key: <Enter it=\"\"></Enter></li>\n <li>Default region name: Give the one most used eg. <code class=\"language-plaintext highlighter-rouge\">ap-southeast-1</code></li>\n <li>Default output format: default is <code class=\"language-plaintext highlighter-rouge\">json</code> but use table for more human readable format.</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>Now you are ready to use the <strong>AWS CLI</strong>\n <ul>\n <li>You need to create a S3 bucket for use. See <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/GetStartedWithS3.html\">AWS Doc</a>.\n <ul>\n <li>Example options when creating a bucket:\n <ul>\n <li>AWS Region: ap-southeast-1</li>\n <li>Copy settings from another bucket. (Specially if rules related Glacier, you don’t have to repeat them here.)</li>\n <li>Object owner: ACL disable</li>\n <li>Block all public access (private)</li>\n <li>Versioning Enabled</li>\n <li>Add a tag. (Helps is tracking for eg. cost )</li>\n <li>Server side encryption enabled with default SSE-S3.</li>\n </ul>\n </li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">aws s3 ls --profile user1</code> will list all the S3 buckets.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">aws s3 cp --profile user1 &lt;src file&gt; s3://bucket-name</code></li>\n </ul>\n </li>\n </ul>\n </li>\n <li><strong>Additional Packages</strong>\n <ul>\n <li>To build pacakages from source install the essentials:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo apt instal build-essential bison flex libx11-dev libxaw7-dev libtool libreadline-dev libncurses-dev automake autoconf texinfo</code>\n <ul>\n <li>If you need the kernel headers: <code class=\"language-plaintext highlighter-rouge\">sudo apt install linux-headers-'uname -r'</code></li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo apt install texlive-font-utils ghostscript</code> : For <code class=\"language-plaintext highlighter-rouge\">epstpdf</code>,….</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"virtual-box\">VIRTUAL BOX</h3>\n\n<p><strong>ADDING A WINDOWS 10 SHARED FOLDER IN UBUNTU 22.04</strong></p>\n\n<ul>\n <li>After installation and <em>before rebooting</em>, make sure the installation ISO image is removed from the VM’s storage:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">Settings -&gt; Storage</code> and select the ISO and from <code class=\"language-plaintext highlighter-rouge\">Attributes -&gt; Optical Drive</code> select _Remove Disk from Virtual Drive`</li>\n </ul>\n </li>\n <li>After reboot and login, install some essentials:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo apt-get update &amp;&amp; sudo apt-get install -y build-essential linux-headers-\\</code>uname -r``</li>\n </ul>\n </li>\n <li>From VM’s VBox Menu select <code class=\"language-plaintext highlighter-rouge\">Devices -&gt; Insert Guest Additions CD image</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">lsblk</code> to find the mount point say <code class=\"language-plaintext highlighter-rouge\">/media/cdrom/VBoxLinusGAs</code></li>\n <li>Run the installation script:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo /media/cdrom/VBoxLinuxGAs/VBoxLinuxAdditions.run</code></li>\n </ul>\n </li>\n <li>Create the folder to mount the share say, <code class=\"language-plaintext highlighter-rouge\">/home/ubuntu/share</code></li>\n <li>Add the user to <code class=\"language-plaintext highlighter-rouge\">vboxsf</code> group (not sure if necessary but doesn’t hurt):\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo adduser ubuntu vboxsf</code></li>\n </ul>\n </li>\n <li>Shutdown the VM: <code class=\"language-plaintext highlighter-rouge\">sudo shutdown -h now</code></li>\n <li>Select from VM’s Vbox Menu: <code class=\"language-plaintext highlighter-rouge\">Settings -&gt; Shared Folder -&gt; Add New..</code>:\n <ul>\n <li>Folder Path: <code class=\"language-plaintext highlighter-rouge\">&lt;Path to Windows 10 Folder&gt;</code></li>\n <li>Folder Name: <code class=\"language-plaintext highlighter-rouge\">vbshare</code> <strong>NOTE</strong> This will be name of the folder in Ubuntu that will be used to mount.</li>\n <li>Mount point: <code class=\"language-plaintext highlighter-rouge\">/home/ubuntu/share</code></li>\n <li><em>Select</em> <code class=\"language-plaintext highlighter-rouge\">Auto-mount</code></li>\n <li><em>Select</em> <code class=\"language-plaintext highlighter-rouge\">Make Permanent</code></li>\n </ul>\n </li>\n <li>Start the VM and it should be mounted. <strong>If NOT</strong> Follow these steps:\n <ul>\n <li>Add the following in <code class=\"language-plaintext highlighter-rouge\">/etc/fstab</code>:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">vbshare /home/ubuntu/share vboxsf defaults 0 0</code></li>\n <li>Test it: <code class=\"language-plaintext highlighter-rouge\">sudo mount -a</code></li>\n </ul>\n </li>\n <li>Add <code class=\"language-plaintext highlighter-rouge\">vboxsf</code> in <code class=\"language-plaintext highlighter-rouge\">/etc/modules</code> (Not sure if necessary)</li>\n </ul>\n </li>\n <li>Resources:\n <ul>\n <li><a href=\"https://gist.github.com/estorgio/0c76e29c0439e683caca694f338d4003\">Mounting VirtualBox shared folders on Ubuntu Server 18.04 LTS</a></li>\n <li><a href=\"https://askubuntu.com/questions/161759/how-to-access-a-shared-folder-in-virtualbox\">How to access a shared folder in VirtualBox? - askUbuntu</a></li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"git\">git</h3>\n\n<p>Tags: #git #github</p>\n\n<p><strong>ADDING A PROJECT TO A GITHUB REPO</strong></p>\n\n<ul>\n <li>Create a repo without any README/.gitignore/license</li>\n <li>If you are going to usee SSH (recommended), copy the SSH key to github from the “Settings-&gt;SSH/GPG Keys” menu.</li>\n <li>Navigate to the project directory:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">git init</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">git add .</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">git commit -m \"init\" -a</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">git remote add origin &lt;URL from Github-&gt;Code&gt;</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">git remote -v</code> to check</li>\n <li><code class=\"language-plaintext highlighter-rouge\">git branch -M main</code> Assuming this is the default branch of your repo.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">git push -u origin main</code></li>\n </ul>\n </li>\n</ul>\n\n<p><strong>ADDING SSH KEYS github.com</strong></p>\n\n<ul>\n <li>github doesn’t support https for maintaing repo using API eg. from Linux. Sp most preferre way is to clone and maintain using SSH so need to add SSH keys to the github account.</li>\n <li>Generating 4096-bit RSA key from <strong>Linux</strong>:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh-keygen -t rsa -b 4096 -C \"email\"</code>\n <ul>\n <li><em>Note</em>: DSA keys has been dropped by github to improve security. github recommends <code class=\"language-plaintext highlighter-rouge\">ed25119</code> but is ok with 4096-bit RSA for legacy systems. Decided to use above not to have any issues with legacy systems. See github doc <a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">here</a></li>\n </ul>\n </li>\n </ul>\n </li>\n <li>\n <p>To add the keys to github account: click setting from the top-right menu, slect “SSH and GPG keys” and click “New SSK Key” and copy paste from <code class=\"language-plaintext highlighter-rouge\">~/.ssh/id_rsa.pub</code></p>\n </li>\n <li>When adding a SSH key to github if you get an error saying “Key already in use” but you don’t see it in the list, Use the following command to see which github account is used in:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh -T -ai ~/.ssh/id_rsa git@github.com</code></li>\n </ul>\n </li>\n <li>If the output is “hi username ..” then that git user is using the above key.</li>\n</ul>\n\n<p><strong>USING MULTIPLE GIT ACCOUNTS FROM ONE LINUX ACCOUNT</strong></p>\n\n<ul>\n <li>Create different keys for different accounts eg.:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh-keygen -t rsa -b 4096 -C \"default\"</code> : This will create the private/public pair id_ras/id_rsa.pub</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh-keygen -t rsa -b 4096 -f git1 -C \"github.com/git1\"</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh-keygen -t rsa -b 4096 -f git2 -C \"github.com/git2\"</code></li>\n </ul>\n </li>\n <li>Add the public key to the respective git account. Add the default key to the account most used so you will not need to add follow the steps to add the keys to ssh-agent before doing a git push.</li>\n <li><strong>NOTE</strong> All documentation suggest to create the file <code class=\"language-plaintext highlighter-rouge\">~/.ssh/ssh_config</code> file to automatically use the respective keys but just couldn’t get it to work.</li>\n <li>After loging in and let’s say you want to use account git1:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">eval \"$(ssh-agent -s)\"</code> Starts the ssh-agent.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh-add ~/.ssh/git1</code> Adds the private key for git1\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh-add -l</code> will list all the keys in the agent</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ssh-add -D</code> will delete all the keys.</li>\n </ul>\n </li>\n <li>Now you can do all the git operation for account git1: <code class=\"language-plaintext highlighter-rouge\">git clone/add/commit/push/etc</code></li>\n <li>Before loging out, kill the ssh-agent process: <code class=\"language-plaintext highlighter-rouge\">pkill -9 -f ssh-agent</code></li>\n <li>Probably a good idea to add it to crontab.</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>DEALING WITH LARGE PAK FILES</strong></p>\n\n<p>If you are dealing with binaries, even pdfs docs etc, then the git repo blows pretty quickly. Especially after deleting all the binaries, the revisions are still in the pack files in <code class=\"language-plaintext highlighter-rouge\">.git/objects/...</code> . So how do you delete them ? Followed this <a href=\"https://support-acquia.force.com/s/article/360004334093-Removing-large-files-from-Git-without-losing-history#:~:text=Branch%20filtering,particular%20files%20from%20your%20history.\">link</a></p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">git verify-pack -v .git/objects/pack/pack-{hash}.idx | sort -k 3 -n | tail -n 20</code> – lists the 20 largest pak files.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">git rev-list --objects --all | grep {hash}</code> – This will list the file path for this hash.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">git filter-branch --index-filter 'git rm --cached --ignore-unmatch ./path/to/resource/*.ext' --tag-name-filter cat -- --all</code></li>\n <li>If you know there was an entire diretory (say <code class=\"language-plaintext highlighter-rouge\">docs/public_html</code>) that has been deleted and you don’t need it, you can delete:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">git filter-branch --index-filter 'git rm --cached --ignore-unmatch docs/public_html/*' --tag-name-filter cat -- --all</code></li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">git push origin --force --all</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">git push origin --force --tags</code> – If you want to purge the tags as well.</li>\n <li>Now, the above command will purge the history from the githib repo but the backup will be created in the .git local directory so there will be no space saving in the current working driectory. Still don’t know how to clean it up properly. The way I do it now is move the directory and just clone it again.</li>\n</ul>\n\n<h2 id=\"single-board-computers-sbc\">SINGLE BOARD COMPUTERS (SBC)</h2>\n\n<h3 id=\"nas-on-raspberrypi-4\">NAS on RaspberryPi 4</h3>\n\n<p>After install and trying to configure services <strong>OpenMediaVault</strong>, decided not to go with it because of restrictive options and problems with features.</p>\n\n<p><strong>INSTALLING RASPBERRY PI OS LITE</strong></p>\n\n<ul>\n <li>Download and start the Raspberry Pi imager.</li>\n <li>Choose the OS type: <code class=\"language-plaintext highlighter-rouge\">Raspberry Pi OS Lite (64 bit)</code></li>\n <li>Choose the target SD card.</li>\n <li>From <em>settings</em> preconfigure avaialble options eg. <code class=\"language-plaintext highlighter-rouge\">ssh creds, WiFi creds, hostname, etc.</code>. This is essential for <em>headless</em> install.</li>\n <li>Login using PuTTy using the preconfigured SSH user and update OS and install essential eg. <code class=\"language-plaintext highlighter-rouge\">vim</code></li>\n</ul>\n\n<p><strong>INSTALLING UFW FIREWALL (OPTIONAL)</strong>\n #ufw #firewall</p>\n\n<p>NOT NEEDED if unit is inside a firewall.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo apt install ufw</code></li>\n <li>Before rebooting make sure you allow SSH: <code class=\"language-plaintext highlighter-rouge\">sudo ufw allow 22</code></li>\n <li>Check the status <code class=\"language-plaintext highlighter-rouge\">sudo ufw status</code></li>\n</ul>\n\n<p><strong>MOUNTING EXTERNAL SSD</strong></p>\n\n<ul>\n <li>Find the block device name eg. <code class=\"language-plaintext highlighter-rouge\">/dev/sda</code> using the command <code class=\"language-plaintext highlighter-rouge\">lsblk</code></li>\n <li>Create a partition (not necessary but highly recommended) using <code class=\"language-plaintext highlighter-rouge\">fdisk</code>:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">fdisk -l</code> to list all partitions available.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">fdisk /dev/sda</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">n</code> for creating a partition. For creating one Linux partition use the defaults.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">p</code> print the partition for checking.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">w</code> write the partition to disk.</li>\n </ul>\n </li>\n <li>Now you can see the block device for the new partition eg. <code class=\"language-plaintext highlighter-rouge\">/dev/sda1</code> using <code class=\"language-plaintext highlighter-rouge\">lsblk</code></li>\n <li>Create a <code class=\"language-plaintext highlighter-rouge\">ext4</code> partition: <code class=\"language-plaintext highlighter-rouge\">sudo mkfs.ext4 /dev/sda1</code></li>\n <li>Find the <em>UUID</em> of the partition: <code class=\"language-plaintext highlighter-rouge\">blkid /dev/sda1</code></li>\n <li>Create a mount point: <code class=\"language-plaintext highlighter-rouge\">sudo mkdir /media/wd220</code></li>\n <li>Create a fstab entry in <code class=\"language-plaintext highlighter-rouge\">/etc/fstab</code>:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">UUID=5abdf860-950b-40b8-8799-49f6ce70044c /media/wd220 ext4 defaults,auto,users,rw,nofail 0 0</code></li>\n <li><strong>FIXME</strong> document the options.</li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo mount -a</code></li>\n</ul>\n\n<p><strong>CREATING A SAMBA SHARE</strong></p>\n\n<p>Could not get a Public share to work. Write permission error from Windows. After trying out lot of ways, following seem to work for a Private share.</p>\n\n<ul>\n <li>Create the share directory: <code class=\"language-plaintext highlighter-rouge\">sudo mkdir /media/wd220/Music</code></li>\n <li>Change owner, group and permission to the user that will be a samba user say smbuser:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo chown smbuser /media/wd220/Music</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo chgrp users /media/wd220/Music</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo chmod 2775 /media/wd220/Music</code> The 2 in the begining makes the folder sticky so users in the group “users” can write to the directory with their ownership.</li>\n </ul>\n </li>\n <li>Install <em>samba</em> : <code class=\"language-plaintext highlighter-rouge\">sudo apt-get install samba smb-client cifs-utils</code></li>\n <li>Add the Windows group (eg. WORKGROUP) to the global option in <code class=\"language-plaintext highlighter-rouge\">/etc/samba/smb.conf</code></li>\n <li>Add the share folder to <code class=\"language-plaintext highlighter-rouge\">/etc/samba/smb.conf</code>:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>Music]\n   comment <span class=\"o\">=</span> Public Music Folder\n   path <span class=\"o\">=</span> /media/wd220/Music\n   <span class=\"nb\">read </span>only <span class=\"o\">=</span> no\n   guest ok <span class=\"o\">=</span> no\n   valid <span class=\"nb\">users</span> <span class=\"o\">=</span> smbuser\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo smbpasswd -a smbuser</code> Add the user as a Samba user. You are going to use this credential when accessing the folder from Windows.</li>\n <li>Allow the SMB ports 139,445 in the firewall (if ufw enabled):</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>ufw allow 139\n<span class=\"nb\">sudo </span>ufw allow 445\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo systemctl restart smbd</code> Restart the SMB daemon.</li>\n <li>Now try accessing from Windows <code class=\"language-plaintext highlighter-rouge\">Win+R</code> and entering <code class=\"language-plaintext highlighter-rouge\">\\\\[IP/hostname]/Music</code></li>\n <li>\n <table>\n <tbody>\n <tr>\n <td>Some useful links: <a href=\"https://devconnected.com/how-to-install-samba-on-debian-10-buster/#:~:text=In%20order%20for%20Samba%20to,on%20ports%20139%20and%20445.\">devconnected</a></td>\n <td><a href=\"https://computingforgeeks.com/how-to-configure-samba-share-on-debian/?expand_article=1\">ComputingForGeeks</a></td>\n <td><a href=\"https://serverspace.io/support/help/configuring-samba-on-debian/\">ServerSpace</a></td>\n </tr>\n </tbody>\n </table>\n </li>\n</ul>\n\n<p><strong>LOGITECH MEDIA SERVER (LMS) on RaspberryPiOS</strong>\n #LMS #lms #squeezebox</p>\n\n<p>This tutorial documents the steps in installing <strong>Logitech Media Server</strong> for organizing Music files. Also, this installation was done on the Raspberry Pi OS that is already running OpenMediaVault (OMV) . So all filesystems are managed through OMV.</p>\n\n<p>Followed the LMS part of <a href=\"https://www.haraldkreuzer.net/en/news/installing-logitech-media-server-raspberry-pi-4b-5-inch-display\">Harald Kreuzer’s Blog</a>. <strong>NOTE</strong> There is section in the blog about disabling the swap to increase the longetivity of the SD card. Worth looking into it.</p>\n\n<p>Important steps are listed below:</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</code> followed by <code class=\"language-plaintext highlighter-rouge\">sudo reboot</code></li>\n <li><strong>Install LMS Server</strong>:</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install libsox-fmt-all libflac-dev libfaad2 \nsudo apt-get install libio-socket-ssl-perl \nsudo apt-get install libcrypt-openssl-bignum-perl \nsudo apt-get install libcrypt-openssl-random-perl \nsudo apt-get install libcrypt-openssl-rsa-perl \nwget https://downloads.slimdevices.com/LogitechMediaServer_v8.3.1/logitechmediaserver_8.3.1_arm.deb \nsudo dpkg -i logitechmediaserver_8.3.1_arm.deb\n</code></pre>  </div></div>\n<p><strong>NOTE</strong> Check the latest LMS distro available.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo ufw allow 9000</code></li>\n <li>The server will now be accessible at <code class=\"language-plaintext highlighter-rouge\">http://&lt;IP&gt;:9000/</code>\n <ul>\n <li><strong>NOTE</strong> you do not need to create the logitech account. You can skipt.</li>\n </ul>\n </li>\n <li><strong>FIXME</strong> Create the appropriate directory structure in OMV and configure that here.\n <ul>\n <li>You can check these links (<a href=\"https://wiki.slimdevices.com/index.php/Beginners_Guide_To_Organising.html\">BegineersGuide</a>, <a href=\"http://www.hydrogenaudio.org/forums/index.php?showtopic=32726\">Survey</a>, <a href=\"https://homedjstudio.com/organize-music-library/\">Organize4DJ-MP3Tags</a>) to see some popular ways to organize folders for music.</li>\n <li>One popular choice is: <code class=\"language-plaintext highlighter-rouge\">/&lt;library&gt;/&lt;artist&gt;/&lt;album&gt;/&lt;tracks&gt;</code></li>\n <li>Organizing Classical Music is different (See <a href=\"https://wiki.slimdevices.com/index.php/BeginnersGuideToClassical.html\">BegineersGuideToClassical</a>. A simple <em>tagging</em> (Tagged during ripping) reco from the guide:\n <ul>\n <li>the folder strategy I am using now is: <code class=\"language-plaintext highlighter-rouge\">/&lt;lib&gt;/&lt;composer&gt;/&lt;CDalbum&gt;/&lt;tracks&gt;</code></li>\n <li>For Various artiests: <code class=\"language-plaintext highlighter-rouge\">/&lt;lib&gt;/&lt;VariousArtist&gt;/&lt;CDalbum&gt;/&lt;tracks&gt;</code></li>\n <li><strong>Tag</strong> reco:\n <ul>\n <li><em>Album</em> tag for <em>Work</em> eg. “Beethoven Symphony no. 5 - Karajan”</li>\n <li><em>Artist</em> tag for <em>Composer</em> eg. “Beethoven”</li>\n <li><em>Title</em> tag for <em>Movement</em> eg. “Beethoven Symp 5 - 3- Allegro”</li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li>You can remove all unnecessary plugins.</li>\n <li>It’s worth installing the <code class=\"language-plaintext highlighter-rouge\">material</code> plugin which is a responsive plugin so the server will be accessible at <code class=\"language-plaintext highlighter-rouge\">https://&lt;IP&gt;:9000/material</code> even from a mobile.</li>\n</ul>\n\n<p><strong>AWS CLI</strong></p>\n\n<ul>\n <li>Check this <a href=\"https://mixignal.github.io/wiki/compute-it.html?highlight=aws%20cli#setting-up-a-linux-vm\">section</a> for installing aws cli tools.</li>\n <li><strong>Note</strong>, download the ARM version instead of the x86 version:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">curl \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\" -o \"awscliv2.zip\"</code></li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Setting crontab for syncing from AWS S3</strong></p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">00 03 * * 1 aws s3 sync --delete --profile srout s3://linode-vm01-bak /media/wd220/aws-S3/srout/linode-vm01-bak &gt; /home/srout/logs/s3sync-linodevm01.log 2&gt;&amp;1</code></li>\n</ul>\n\n<p><strong>OpenMediaVault</strong></p>\n\n<p>After install and trying to configure services, decided not to go with it because of restrictive options and problems with features. Following links are good guides if you decide to:</p>\n\n<ul>\n <li><a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwizmoe02KGAAxXFavUHHUvVAVgQFnoECA4QAQ&amp;url=https%3A%2F%2Fpimylifeup.com%2Fraspberry-pi-openmediavault%2F&amp;usg=AOvVaw1Iw1MJa1bGIa_1SJTSwJWb&amp;opi=89978449\">Installing OpenMediaVault to a Raspbeery Pi</a></li>\n <li><a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwizmoe02KGAAxXFavUHHUvVAVgQFnoECA0QAQ&amp;url=https%3A%2F%2Fwww.makeuseof.com%2Finstall-openmediavault-raspberry-pi%2F&amp;usg=AOvVaw2--kLBPwz6WF0Yf27PES_x&amp;opi=89978449\">How to Install OpenMediaVault on a Raspberry Pi</a></li>\n</ul>\n\n<h2 id=\"security\">Security</h2>\n\n<h3 id=\"security-hardening-a-linux-server\">Security Hardening a Linux Server</h3>\n\n<ul>\n <li>Some good guides for securing your server/VM:\n <ul>\n <li>This section details the steps to setup a <strong>Ubuntu Linode VM</strong> following the this <a href=\"https://www.linode.com/docs/guides/set-up-and-secure/\">guide</a>.</li>\n <li><a href=\"https://www.linode.com/community/questions/467/ive-noticed-some-suspicious-activity-on-my-linode-what-do-i-do\">Thread from Linode community</a>: on tracking suspious activity including running anti-virus and antimalware.</li>\n <li><a href=\"https://www.linode.com/docs/guides/using-fail2ban-to-secure-your-server-a-tutorial/\">Fail2Ban Tutorial from Linode</a></li>\n </ul>\n </li>\n <li><strong>Harden SSH Access</strong> by adding authentication via private/public key pair and disable password access.\n <ul>\n <li>For <strong>PuTTy</strong>, use <strong>PuTTygen</strong> to generate private/public key pair.</li>\n <li>use 4096-bit RSA or ECDSA to generate the key pair.</li>\n <li>Save the private key in safe location and add it to the PuTTy session: <code class=\"language-plaintext highlighter-rouge\">Connection -&gt; SSH -&gt; Auth -&gt; Private key file for authentication</code></li>\n <li>Add the public key to the Linux VM instance: <code class=\"language-plaintext highlighter-rouge\">~/.ssh/authorized_keys</code></li>\n <li>Andd now when loging in for that particular user, you will not require to use the password.</li>\n </ul>\n </li>\n <li><strong>SSH Daemon Options</strong> in <code class=\"language-plaintext highlighter-rouge\">/etc/ssh/sshd_config</code>:\n <ul>\n <li>Disable <em>root</em> login via SSH: <code class=\"language-plaintext highlighter-rouge\">PermitRootLogin no</code></li>\n <li>Disable <em>password auth</em>: <code class=\"language-plaintext highlighter-rouge\">PasswordAuthentication no</code></li>\n <li>If using only IPv4 then: <code class=\"language-plaintext highlighter-rouge\">AddressFamily inet</code></li>\n <li><em>Restart</em> ssh daemon: <code class=\"language-plaintext highlighter-rouge\">sudo systemctl restart sshd</code></li>\n </ul>\n </li>\n <li>Use <strong>Fail2Ban</strong> to secure <code class=\"language-plaintext highlighter-rouge\">sshd</code> service (and other services as well):\n <ul>\n <li><a href=\"https://www.linode.com/docs/guides/using-fail2ban-to-secure-your-server-a-tutorial/\">Linode Tutorial on Fail2Ban</a> to install and configure fail2ban.</li>\n <li><strong>Install</strong> (without sendmail and for CentOS make sure <code class=\"language-plaintext highlighter-rouge\">epel-release</code> is installed and systems are up to date:\n <ul>\n <li><strong>Ubuntu</strong> (22.04): <code class=\"language-plaintext highlighter-rouge\">#apt install fail2ban</code></li>\n <li><strong>CentOS</strong> (7): <code class=\"language-plaintext highlighter-rouge\">#yum install fail2ban</code></li>\n </ul>\n </li>\n <li>Make sure <code class=\"language-plaintext highlighter-rouge\">ssh</code> is enabled through firewall.</li>\n <li>Make local copies of:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">/etc/fail2ban/fail2ban.conf -&gt; /etc/fail2ban/fail2ban.local</code> : Default settings should be good enough for the start.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">/etc/fail2ban/jail.conf -&gt; /etc/fail2ban/jail.local</code></li>\n </ul>\n </li>\n <li>Configure <code class=\"language-plaintext highlighter-rouge\">jail.local</code>:\n <ul>\n <li>Uncomment ignore ip such that local host is not filtered and add any static IPs you regularly log from:\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ignoreip = 127.0.0.1/8 ::1 &lt;Any other Public IPs&gt;\n</code></pre>  </div> </div>\n </li>\n <li>If <code class=\"language-plaintext highlighter-rouge\">sendmail</code> is not installed, change <code class=\"language-plaintext highlighter-rouge\">mta</code> to regular <code class=\"language-plaintext highlighter-rouge\">mail</code> (Not sure if you really need this):\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mta = mail`\n</code></pre>  </div> </div>\n </li>\n <li>Enable the <code class=\"language-plaintext highlighter-rouge\">sshd</code> jail:\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[sshd]\nenabled = true\n</code></pre>  </div> </div>\n </li>\n </ul>\n </li>\n <li>For CentOS, change <code class=\"language-plaintext highlighter-rouge\">backend</code> from <code class=\"language-plaintext highlighter-rouge\">auto</code> to <code class=\"language-plaintext highlighter-rouge\">systemd</code>:\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>backend = systemd\n</code></pre>  </div> </div>\n </li>\n <li>Start and enable the service so it starts at boot:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">#systemctl enable fail2ban</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">#systemctl start fail2ban</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">#systemctl status fail2ban</code> to check the status if it started or any error.</li>\n </ul>\n </li>\n <li>You can also the check the status through the client app:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">#fail2ban-client status</code> which will show the active jails like this:\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Status\n|- Number of jail:      1\n`- Jail list:   sshd\n</code></pre>  </div> </div>\n </li>\n </ul>\n </li>\n <li>And you can see the details of jail:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">#fail2ban-client status sshd</code> which will show the details of the jail <code class=\"language-plaintext highlighter-rouge\">sshd</code>:\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Status for the jail: sshd\n|- Filter\n|  |- Currently failed: 4\n|  |- Total failed:     62\n|  `- File list:        /var/log/auth.log\n`- Actions\n |- Currently banned: 0\n |- Total banned:     8\n `- Banned IP list:\n</code></pre>  </div> </div>\n </li>\n </ul>\n </li>\n <li><strong>NOTE</strong> the log file <code class=\"language-plaintext highlighter-rouge\">/var/log/auth.log</code> is specified in <code class=\"language-plaintext highlighter-rouge\">/etc/fail2ban/paths-common.conf</code></li>\n <li>You can use <code class=\"language-plaintext highlighter-rouge\">journalctl</code> to browse through the logs.</li>\n </ul>\n </li>\n <li><strong>Configure Firewall</strong>. The default application in Ubuntu <code class=\"language-plaintext highlighter-rouge\">ufw</code> (Uncomplicated Firewall) is disabled. Follow the <a href=\"https://www.linode.com/docs/guides/configure-firewall-with-ufw/\">Linode Tutorial</a> to install and setup the firewall. Basic setup steps:\n <ul>\n <li>Allow SSH connections: <code class=\"language-plaintext highlighter-rouge\">sudo ufw allow ssh</code></li>\n <li>Use the default rules:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo ufw default allow outgoing</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo ufw default deny incoming</code></li>\n </ul>\n </li>\n <li>Enable it: <code class=\"language-plaintext highlighter-rouge\">sudo ufw enable</code></li>\n <li>Check the status: <code class=\"language-plaintext highlighter-rouge\">sudo ufw status</code></li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"system-log-files\">System Log Files</h3>\n\n<p><strong>Using <code class=\"language-plaintext highlighter-rouge\">journactl</code> Command</strong></p>\n\n<p>System logs are a vital resource for administrators and developers looking to monitor system performance, troubleshoot issues, and understand the events taking place within the system. \nCheck this <a href=\"https://www.linuxjournal.com/content/mastering-journalctl-command-comprehensive-guide\">Linux Journal article</a>, to learn about this command. Here are some useful ways to use <code class=\"language-plaintext highlighter-rouge\">journalctl</code>:</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl -r</code> : new entries first.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl -n 15</code> : view last 15 entries.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl -p 3</code> : priority level 3. Note, most sshd entries are in this level.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl -u fail2ban.service</code> : logs of a particular service.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl --list-boots</code>: Logs from previous boots.\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl -b -1</code>: Logs from a particular boot.</li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl -f</code> : real-time monitoring.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journactl --since yesterday</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl --disk-usage</code> : Shows the disk usage of the journal log files.\n <ul>\n <li>To clean of the journal logs to a limited <strong>size</strong>:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl --rotate</code> to move active logs to archive and</li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl --vaccum-size=250M</code> will delete past logs to limit size to <code class=\"language-plaintext highlighter-rouge\">250Mbytes</code>.</li>\n </ul>\n </li>\n <li>To make it automatic, edit <code class=\"language-plaintext highlighter-rouge\">/etc/systemd/journald.conf</code>\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SystemMaxUse = 250M\n</code></pre>  </div> </div>\n </li>\n <li>restart service:\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl restart systemd-journald\n</code></pre>  </div> </div>\n </li>\n <li>To clean of the journal logs to a limited <strong>time</strong>:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl --rotate</code> to move active logs to archive and</li>\n <li><code class=\"language-plaintext highlighter-rouge\">$ journalctl --vaccum-time=1d</code> will delete past logs from begining to given time.</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"cli-password-vault-pass\">CLI Password Vault pass</h3>\n\n<p><strong>NOTE</strong> This installation is done at <strong>USER LEVEL</strong>. So make sure <code class=\"language-plaintext highlighter-rouge\">pass</code> is installed eg. <code class=\"language-plaintext highlighter-rouge\">sudo apt install pass</code></p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">gpg --full-generate-key</code> skip this step if already installed.\n <ul>\n <li>select the kind eg. <code class=\"language-plaintext highlighter-rouge\">RSA</code></li>\n <li>keysize eg. <code class=\"language-plaintext highlighter-rouge\">4096</code></li>\n <li>validity eg. <code class=\"language-plaintext highlighter-rouge\">0</code> (forever)</li>\n <li>Enter user info</li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">gpg --list-secret-keys --keyid-format LONG</code> will generate something like this:</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sec   4096R/AAAA2222CCCC4444 2021-03-18 [expires: 2023-03-18] uid         John Doe &lt;jdoe@example.com&gt;\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">pass init 'AAAA2222CCCC4444'</code> to initiate pass using the GPG key ID.\n <ul>\n <li><strong>IMPORTANT</strong> Make the passphrase strong and keep it in a safe place.</li>\n </ul>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">pass generate -c Internet/github.com 21</code> to generate a 21-char-long password and copy it to clipboard.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">pass insert -em banking/citi</code> will insert a multiline (m) info and echo (e) it back. Press <code class=\"language-plaintext highlighter-rouge\">Ctrl-D</code> when done entering.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">pass show banking/citi</code> displays the password.</p>\n </li>\n <li><strong>Setting up for Syncing with Git Repo</strong>:\n <ul>\n <li>Create a git repo in github.com (can be something else too)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">pass git init</code> will initialize pass DB fir git repo sync.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">pass git remote add origin git@github.com:johndoe/pass-store.git</code>\n <ul>\n <li>Make sure the proper authentication is in place.</li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">pass git push -u --all</code></li>\n </ul>\n </li>\n <li><strong>Cloning the git pass</strong>\n <ul>\n <li>From the server export the keys:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">gpg --export-secret-keys &gt; privkey.asc</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">gpg --export &gt; pubkey.asc</code></li>\n <li>Make sure you store in a safe place.</li>\n </ul>\n </li>\n <li>Import on the new client:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">gpg --import pubkey.asc</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">gpg --allow-secret-key-import --import privkey.asc</code></li>\n </ul>\n </li>\n <li>Clone the git repo from the server (FIXME: How to clone from github?)\n <ul>\n <li>Setup SSH keys between client-server if it’s setup that way.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">git clone user@server:~/.password-store</code></li>\n <li>Now you can use the client pass but push from client has issues. So best to use it only for pull.</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"networking\">Networking</h2>\n\n<h3 id=\"peer-to-peer-vpn-using-tinc\">Peer-to-Peer VPN using tinc</h3>\n\n<p><strong>SETUP on CentOS 7</strong></p>\n\n<ul>\n <li>Mostly followed this <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-tinc-and-set-up-a-basic-vpn-on-ubuntu-18-04\">blog</a> on Digital Ocean. <strong>Note</strong>: The blog is for Ubuntu 18.04</li>\n <li>The setup was done on two linux machines: VM on cloud (<code class=\"language-plaintext highlighter-rouge\">docosvm01</code>) and a server behind a firewall (<code class=\"language-plaintext highlighter-rouge\">vlsisrv02</code>), both running CentOS 7.</li>\n <li>Install <code class=\"language-plaintext highlighter-rouge\">tinc</code> on both the machines: <code class=\"language-plaintext highlighter-rouge\">sudo yum install tinc</code>\n <ul>\n <li>Make sure the <code class=\"language-plaintext highlighter-rouge\">epel</code> repo is enabled.</li>\n </ul>\n </li>\n <li>The setup’s goal is to have <code class=\"language-plaintext highlighter-rouge\">docosvm01</code> listen to connect requests from other clients eg. <code class=\"language-plaintext highlighter-rouge\">vlsisrv02</code>. Primary reason being the VM has public address which avoids any NAT problems. The clients can be behind a NAT without any issues.</li>\n <li>Create the configuration directory on both the machines (<code class=\"language-plaintext highlighter-rouge\">tincvpn1</code> is name for this VPN conn):\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo mkdir -p /etc/tinc/tincvpn1/hosts</code></li>\n </ul>\n </li>\n <li>Create the config file <code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/tinc.conf</code> with the following content:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Name <span class=\"o\">=</span> docosvm01\nAddressFamily <span class=\"o\">=</span> ipv4\nInterface <span class=\"o\">=</span> tun0\n</code></pre>  </div></div>\n<p><strong>IMPORTANT NOTE</strong>: The interface Name (<code class=\"language-plaintext highlighter-rouge\">docosvm01</code>) has to <strong>different</strong> from the <code class=\"language-plaintext highlighter-rouge\">hostname</code>.</p>\n\n<ul>\n <li>Create a host config file (name same as above <code class=\"language-plaintext highlighter-rouge\">Name</code>) <code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/hosts/docosvm01</code> with the following content:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Address <span class=\"o\">=</span> &lt;Public IP of the VM&gt;\nSubnet <span class=\"o\">=</span> 10.0.0.1/32\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo tincd -n tincvpn1 -K4096</code> : create the public/private pair keys\n <ul>\n <li>Choose the default options. The public key will get autimatically appended to the host file.</li>\n </ul>\n </li>\n <li>Create the link-up script <code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/tinc-up</code> :</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/sh</span>\nip <span class=\"nb\">link set</span> <span class=\"nv\">$INTERFACE</span> up\nip addr add 10.0.0.1/32 dev <span class=\"nv\">$INTERFACE</span>\nip route add 10.0.0.0/24 dev <span class=\"nv\">$INTERFACE</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>Create the link-down script <code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/tinc-down</code> :</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/sh</span>\nip route del 10.0.0.0/24 dev <span class=\"nv\">$INTERFACE</span>\nip addr del 10.0.0.1/32 dev <span class=\"nv\">$INTERFACE</span>\nip <span class=\"nb\">link set</span> <span class=\"nv\">$INTERFACE</span> down\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo chmod 755 /etc/tinc/tincvpn1/tinc-*</code></li>\n <li>Open the port <code class=\"language-plaintext highlighter-rouge\">655</code> (not sure which so opened both tcp/udp):</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--add-port</span><span class=\"o\">=</span>655/udp <span class=\"nt\">--permanent</span>\n<span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--add-port</span><span class=\"o\">=</span>655/tcp <span class=\"nt\">--permanent</span>\n<span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--reload</span>\n<span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--list-port</span>\n</code></pre>  </div></div>\n\n<p>For <strong>Ubuntu</strong> you can use <code class=\"language-plaintext highlighter-rouge\">ufw</code>: <code class=\"language-plaintext highlighter-rouge\">sudo ufw allow 655/tcp ; sudo ufw reload</code></p>\n\n<ul>\n <li><strong>Confiuring the Client</strong> <code class=\"language-plaintext highlighter-rouge\">vlsisrv02</code>:</li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo mkdir -p /etc/tinc/tincvpn1/hosts</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/tinc.conf</code>:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Name <span class=\"o\">=</span> vlsisrv02\nAddressFamily <span class=\"o\">=</span> ipv4\nInterface <span class=\"o\">=</span> tun0\nConnectTo <span class=\"o\">=</span> docosvm01\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/hosts/vlsisrv02</code>:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Subnet <span class=\"o\">=</span> 10.0.0.2/32\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">sudo tincd -n tincvpn1 -K4096</code> : Create key pairs.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/tinc-up</code>:</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/sh</span>\nip <span class=\"nb\">link set</span> <span class=\"nv\">$INTERFACE</span> up\nip addr add 10.0.0.2/32 dev <span class=\"nv\">$INTERFACE</span>\nip route add 10.0.0.0/24 dev <span class=\"nv\">$INTERFACE</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">/etc/tinc/tincvpn1/tinc-down</code>:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/sh</span>\nip route del 10.0.0.0/24 dev <span class=\"nv\">$INTERFACE</span>\nip addr del 10.0.0.2/32 dev <span class=\"nv\">$INTERFACE</span>\nip <span class=\"nb\">link set</span> <span class=\"nv\">$INTERFACE</span> down\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo chmod 755 /etc/tinc/tincvpn1/tinc-*</code></li>\n <li>Open the ports <code class=\"language-plaintext highlighter-rouge\">655</code>:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--add-port</span><span class=\"o\">=</span>655/udp <span class=\"nt\">--permanent</span>\n<span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--add-port</span><span class=\"o\">=</span>655/tcp <span class=\"nt\">--permanent</span>\n<span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--reload</span>\n<span class=\"nb\">sudo </span>firewall-cmd <span class=\"nt\">--list-port</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><strong>Distributing the Keys</strong></li>\n <li>If the SSH keys are used between the servers, make sure the public keys are appropriately added in <code class=\"language-plaintext highlighter-rouge\">~/.ssh/authorized_keys</code></li>\n <li>Using <code class=\"language-plaintext highlighter-rouge\">scp</code>, copy:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">docosvm01:/etc/tinc/tincvpn1/hosts/docosvm01</code> to <code class=\"language-plaintext highlighter-rouge\">vlsisrv02:/etc/tinc/tincvpn1/hosts/</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">vlsisrv02:/etc/tinc/tincvpn1/hosts/vlsisrv02</code> to <code class=\"language-plaintext highlighter-rouge\">docosvm01:/etc/tinc/tincvpn1/hosts/</code></li>\n <li><strong>Note</strong>: Although the blog suggests to change the public IP of <code class=\"language-plaintext highlighter-rouge\">docosvm01</code> to the VPN subnet IP, you don’t have to.</li>\n </ul>\n </li>\n <li><strong>Testing the setup</strong>:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo tincd -n netname -D -d3</code> on both the servers will start the daemon in foreground (<code class=\"language-plaintext highlighter-rouge\">-D</code>) in verbose debug mode (<code class=\"language-plaintext highlighter-rouge\">-d3</code>).</li>\n <li>If it runs successfully you can <code class=\"language-plaintext highlighter-rouge\">ping 10.0.0.2</code> from <code class=\"language-plaintext highlighter-rouge\">docosvm01</code></li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo systemctl start tinc@tincvpn1</code> will start the daemon in the background.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo systemctl enable tinc@tincvpn1</code> will start the daemon at startup. <strong>FIXME</strong> presently not starting at boot.</li>\n</ul>\n\n<p><strong>ADDING ANOTHER TINC SERVER</strong></p>\n\n<ul>\n <li>If you want to add another <em>server</em> say <code class=\"language-plaintext highlighter-rouge\">docosvm02</code> for peer-to-peer access to the same client <code class=\"language-plaintext highlighter-rouge\">vlsisrv02</code>:</li>\n <li>Setup <code class=\"language-plaintext highlighter-rouge\">docosvm02</code> just like <code class=\"language-plaintext highlighter-rouge\">docosvm01</code> above.</li>\n <li>Add ‘ConnectTo’ to the <code class=\"language-plaintext highlighter-rouge\">vlsisrv02:/etc/tinc/tincvpn1/tinc.conf</code> to include <code class=\"language-plaintext highlighter-rouge\">docosvm02</code> as well:</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Name <span class=\"o\">=</span> vlsisrv02\nAddressFamily <span class=\"o\">=</span> ipv4\nInterface <span class=\"o\">=</span> tun0\nConnectTo <span class=\"o\">=</span> docosvm01\nConnectTo <span class=\"o\">=</span> docosvm02\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>Copy the keys: <code class=\"language-plaintext highlighter-rouge\">docosvm02:/etc/tinc/tincvpn1/hosts/docosvm02</code> to <code class=\"language-plaintext highlighter-rouge\">vlsisrv02:/etc/tinc/tincvpn1/hosts/</code></p>\n </li>\n <li>Restart <code class=\"language-plaintext highlighter-rouge\">tinc</code> on <code class=\"language-plaintext highlighter-rouge\">vlsisrv02</code>: <code class=\"language-plaintext highlighter-rouge\">sudo systemctl restart tinc@tincvpn1</code></li>\n <li>If all goes well, that’s it!</li>\n</ul>\n\n<h3 id=\"pptp-vpn-client\">PPTP VPN client</h3>\n\n<p><strong>SETUP on CentOS 7</strong></p>\n\n<ul>\n <li>Followed this <a href=\"https://zlthinker.github.io/Setup-VPN-on-CentOS\">blog</a> to setup the VPN</li>\n <li>Install PPTP: <code class=\"language-plaintext highlighter-rouge\">sudo yum install pptp pptp-setup</code></li>\n <li>Configuration: <code class=\"language-plaintext highlighter-rouge\">sudo pptpsetup –create bmt-229 –server [server address] –username [username] –password [pwd] –encrypt</code></li>\n <li>This command will create a file named <code class=\"language-plaintext highlighter-rouge\">bmt-229</code> under <code class=\"language-plaintext highlighter-rouge\">/etc/ppp/peers/</code> with server info written inside.</li>\n <li>This command will also write your username and password into <code class=\"language-plaintext highlighter-rouge\">/etc/ppp/chap-secrets</code></li>\n <li>Register the ppp_mppe kernel module: <code class=\"language-plaintext highlighter-rouge\">sudo modprobe ppp_mppe</code></li>\n <li>Register the nf_conntrack_pptp kernel module: <code class=\"language-plaintext highlighter-rouge\">sudo modprobe nf_conntrack_pptp</code></li>\n</ul>\n\n<p><strong>USER GUIDE</strong></p>\n\n<ul>\n <li>Connect to VPN PPTP: <code class=\"language-plaintext highlighter-rouge\">sudo pppd call config</code></li>\n <li>It will establish PPTP VPN connection. You can type command <code class=\"language-plaintext highlighter-rouge\">ip a | grep ppp</code> to find the connection name (e.g. <code class=\"language-plaintext highlighter-rouge\">ppp0</code>). No return indicates connection failure.</li>\n <li>If any error, you can look into <code class=\"language-plaintext highlighter-rouge\">/var/log/messages</code> for log info</li>\n <li>Check IP routing table info: <code class=\"language-plaintext highlighter-rouge\">route -n</code></li>\n <li>Add Network Segment to current connection:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">route add -net 192.168.11.0 netmask 255.255.255.0 dev ppp0</code></li>\n </ul>\n </li>\n <li>You can now ping the destination to check the access</li>\n <li>Disconnect the VPN: <code class=\"language-plaintext highlighter-rouge\">sudo killall pppd</code></li>\n</ul>\n\n<h3 id=\"putty\">PuTTY</h3>\n\n<p><strong>EXPORTING and IMPORTING a SESSION</strong></p>\n<ul>\n <li>In windows search and start the <em>Registry Editor</em> progam <code class=\"language-plaintext highlighter-rouge\">regedit.exe</code></li>\n <li>Navigate to <code class=\"language-plaintext highlighter-rouge\">HKEY_CURRENT_USER -&gt; Software -&gt; SimonTatham -&gt; PuTTY -&gt; Sessions</code></li>\n <li>Right Click on the session name and export it.</li>\n <li>To import, <code class=\"language-plaintext highlighter-rouge\">File -&gt; Import</code></li>\n</ul>\n\n<p><strong>DELETING A KEY FROM A SESSION</strong></p>\n<ul>\n <li>In windows search and start the <em>Registry Editor</em> progam <code class=\"language-plaintext highlighter-rouge\">regedit.exe</code></li>\n <li>Navigate to <code class=\"language-plaintext highlighter-rouge\">HKEY_CURRENT_USER -&gt; Software -&gt; SimonTatham -&gt; PuTTY -&gt; SshHostKeys</code></li>\n <li>Select the appropriate key and delete it.</li>\n</ul>\n\n<h2 id=\"websitewiki\">WebSite/Wiki</h2>\n\n<h3 id=\"jekyll-static-page-on-github\">Jekyll: Static Page on GitHub</h3>\n\n<table>\n <tbody>\n <tr>\n <td><a href=\"https://jekyllrb.com\">#jekyll</a></td>\n <td>#github</td>\n <td><a href=\"https://github.com/rundocs/jekyll-rtd-theme\">#jekyll-rtd-theme</a></td>\n <td>#website</td>\n <td>#static</td>\n <td><a href=\"https://jekyll-themes.com/jekyll-rtd/\">#jekyll-rtd-userguide</a></td>\n </tr>\n </tbody>\n</table>\n\n<p>This section shows you how to create a static web page using <a href=\"https://jekyllrb.com\">Jekyll</a> (and a Jekyll theme) and host it on github.</p>\n\n<p><strong>PREPARING LINUX FOR JEKYLL</strong></p>\n<ul>\n <li>First we need install the prereqs on a Linux workstation. Following is for the <code class=\"language-plaintext highlighter-rouge\">Ubuntu</code> on <code class=\"language-plaintext highlighter-rouge\">AWS</code>:</li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo apt-get install ruby-full build-essential zlib1g-dev</code></li>\n <li>In order to load <code class=\"language-plaintext highlighter-rouge\">gem</code> locally, add the following in <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">export GEM_HOME=$HOME/gems</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">export PATH=$HOME/gems/bin:$PATH</code></li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">gem install jekyll bundler</code></li>\n</ul>\n\n<p><strong>CONFIGURING JEKYLL</strong></p>\n<ul>\n <li>Site-wise configuration are done using <code class=\"language-plaintext highlighter-rouge\">_config.yml</code></li>\n <li>See https://jekyll-rtd-theme.rundocs.io/ for config options.</li>\n <li><strong>IMPORTANT</strong> Option <code class=\"language-plaintext highlighter-rouge\">baseurl</code> when testing a site that doesn’t sit at the root of the server domain. See this <a href=\"https://byparker.com/blog/2014/clearing-up-confusion-around-baseurl/#:~:text=Set%20baseurl%20in%20your%20_config,baseurl%20to%20in%20your%20_config\">blog</a> for more detail on it.</li>\n <li>Someone changed this to <code class=\"language-plaintext highlighter-rouge\">/silicon-vlsi.github.io</code> and all urls had duplicate domain eg <code class=\"language-plaintext highlighter-rouge\">https://silicon-vlsi.github.io/silicon-vlsi.github.io/content/projects.html</code> and thus breaking the links.</li>\n <li>Removed the <code class=\"language-plaintext highlighter-rouge\">baseurl</code> and <code class=\"language-plaintext highlighter-rouge\">url</code> as well since hosting on github automatiacally takes care of it. I think. It works so far.</li>\n</ul>\n\n<p><strong>USING A JEKYLL TEMPLATE IN GITHUB</strong></p>\n<ul>\n <li>Login to your github account eg. <code class=\"language-plaintext highlighter-rouge\">silicon-vlsi</code></li>\n <li>Navigate to the template repo (eg. <a href=\"https://github.com/rundocs/jekyll-rtd-theme\">#jekyll-rtd-theme</a> and click <code class=\"language-plaintext highlighter-rouge\">Fork</code></li>\n <li>Rename (from the repo’s settings) the copied repo to the following format:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;username&gt;.github.io</code></li>\n <li>eg. <code class=\"language-plaintext highlighter-rouge\">silicon-vlsi.github.io</code></li>\n </ul>\n </li>\n <li>Give it few minutes to publish it and browse to <code class=\"language-plaintext highlighter-rouge\">http://silicon-vlsi.github.io</code> to see the website!</li>\n</ul>\n\n<p><strong>USING JEKYLL TO MAINTAIN THE SITE</strong></p>\n<ul>\n <li>Clone the repo to your prepared Linux workstation:\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">git clone https://github.com/silcion-vlsi/silicon-vlsi.github.io</code></li>\n </ul>\n </li>\n <li>Change directory <code class=\"language-plaintext highlighter-rouge\">cd</code> to <code class=\"language-plaintext highlighter-rouge\">silicon-vlsi.github.io</code> and edit <code class=\"language-plaintext highlighter-rouge\">_config.yml</code> change the info.</li>\n <li>For the first time after clone, to get the dependencies:<code class=\"language-plaintext highlighter-rouge\">bundle install</code>\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">bundle update</code> FIXME Document this</li>\n </ul>\n </li>\n <li>Build the site again after the changes:<code class=\"language-plaintext highlighter-rouge\">bundle exec jekyll build</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">git commit --all [--allow-empty] -m \"comment\"</code> FIXME: Document when we need <code class=\"language-plaintext highlighter-rouge\">--allow-empty</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">git push</code></li>\n</ul>\n\n<p><strong>CONTENT MANAGEMENT</strong></p>\n\n<p>The directory structure (USR tag indicates changes made by the user and SYS typically should be left untouched and synced with the original repo):</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n├── README.md              : USR: Content <span class=\"k\">for </span>the landing page\n├── _config.yml            : USR: Site-wide configuration\n├── _includes              : SYS: All includes: common codes, etc\n├── _layouts               : SYS: site layout\n├── _sass                  : SYS: ??\n├── _site                  : SYS: Compiled html site here\n├── assets                 : SYS: CSS themes etc.\n├── content                : USR: Main site content goes here.\n│   ├── README.md\n│   ├── Resources\n│   ├── people.md\n│   ├── projects.md\n│   └── training.md\n└── wiki                   : USR: The second content page\n    ├── README.md\n    ├── doc1\n    ├── doc2\n    └── quickref.md\n\n</code></pre>  </div></div>\n\n<p><strong>SYNCING THE LOCAL FORK WITH ORIGINAL UPSTREAM REPO</strong>\nFIXME Refer a proper documentation for this and put some more detail in this documentation.</p>\n\n<ul>\n <li>Related github docs: <a href=\"https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork\">Config a remote for fork</a>, <a href=\"https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork\">Syncing a fork</a></li>\n <li><strong>Onetime</strong> config remote upstream repo with the fork:\n <ul>\n <li>List the current configured remote repository for your fork.<code class=\"language-plaintext highlighter-rouge\">git remote -v</code></li>\n <li>Specify the remote upstream repository that will be synced with the fork:<code class=\"language-plaintext highlighter-rouge\">git remote add upstream https://github.com/rundocs/jekyll-rtd-theme.git</code></li>\n <li>Verify: <code class=\"language-plaintext highlighter-rouge\">git remote -v</code></li>\n </ul>\n </li>\n <li>Syncing the fork withe upstream repo:\n <ul>\n <li>Fetch the branches and their respective commits from the upstream repository. Commits to BRANCHNAME will be stored in the local branch upstream/BRANCHNAME: <code class=\"language-plaintext highlighter-rouge\">git fetch upstream</code></li>\n <li>Check out your fork’s local default branch - in this case, we use <code class=\"language-plaintext highlighter-rouge\">develop</code> FIXME need more clarity on this one:<code class=\"language-plaintext highlighter-rouge\">git checkout develop(?)</code></li>\n <li>Merge the changes from the upstream default branch - in this case, <code class=\"language-plaintext highlighter-rouge\">upstream/develop</code> - into your local default branch. This brings your fork’s default branch into sync with the upstream repository, without losing your local changes:<code class=\"language-plaintext highlighter-rouge\">git merge upstream/develop</code></li>\n <li>Push the changes to the fork:<code class=\"language-plaintext highlighter-rouge\">git push</code></li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"logos\">LOGOS</h3>\n\n<ul>\n <li><a href=\"http://www.entrepreneur.com/article/232401\">What Does the Color of Your Logo Say About Your Business? (Infographic)</a></li>\n</ul>\n\n<h3 id=\"creating-favicon\">Creating favicon</h3>\n\n<ul>\n <li>Generate a <strong>16x16</strong> image (Gimp, Inkscape, etc) eg. favicon.png</li>\n <li>Convert it to a ppm or pnm format eg: <code class=\"language-plaintext highlighter-rouge\">$ pngtopnm favicon.png &gt; favicon.pnm </code>\n <ul>\n <li><strong>NOTE</strong> If you have more than 256 colors, you’ll get an error. You can quantize it to 256 using <code class=\"language-plaintext highlighter-rouge\">$ pnmquant 256 favicon.pnm &gt; temp.pnm; mv temp.pnm favicon.pnm</code></li>\n </ul>\n </li>\n <li>Convert using the the utility <code class=\"language-plaintext highlighter-rouge\">ppmtowinicon</code> : <code class=\"language-plaintext highlighter-rouge\">$ ppmtowinicon -output favicon.ico favicon.pnm</code></li>\n</ul>\n\n<h2 id=\"media\">Media</h2>\n\n<h3 id=\"audio-video\">Audio-Video</h3>\n\n<p><strong>YouTube DOWNLOAD</strong></p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo chmod a+rx /usr/local/bin/yt-dlp</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">sudo yt-dlp -U</code> : To update</li>\n <li><strong>NOTE</strong> The <code class=\"language-plaintext highlighter-rouge\">yt-dlp</code> and <code class=\"language-plaintext highlighter-rouge\">youtube-dl</code> packages in Ubuntu 22.04 was broken as of 2023/03/10</li>\n</ul>\n\n<p><strong>EXTRACTING AUDIO FROM MP4</strong></p>\n\n<ul>\n <li>Install <code class=\"language-plaintext highlighter-rouge\">ffmpeg</code> : <code class=\"language-plaintext highlighter-rouge\">sudo apt install ffmpeg</code></li>\n <li>To extract: <code class=\"language-plaintext highlighter-rouge\">ffmpeg -i &lt;file.mp4&gt; out.mp3</code></li>\n <li>See script <code class=\"language-plaintext highlighter-rouge\">~/bin/yt-extract</code></li>\n</ul>\n\n<h2 id=\"open-source\">Open-Source</h2>\n\n<p><strong>Resources</strong></p>\n\n<ul>\n <li><a href=\"https://www.redhat.com/en/topics/open-source/what-is-open-source-software\">Redhat: What is open source software?</a></li>\n <li><a href=\"https://opensource.com/law/13/1/which-open-source-software-license-should-i-use?extIdCarryOver=true&amp;sc_cid=701f2000001OH6fAAG\">opensource.com:Which open source software license should I use?</a></li>\n</ul>\n\n<h3 id=\"licensing\">Licensing</h3>\n\n<ul>\n <li>No copy left: MIT, new BSD</li>\n <li>Some copy left with patenting &amp; licensing</li>\n <li>All copy left: GPLs</li>\n</ul>\n","dir":"/wiki/","name":"compute-it.md","path":"wiki/compute-it.md","url":"/wiki/compute-it.html"},{"sort":2,"layout":"default","title":"USER GUIDES","content":"# USER GUIDES\n\n## Verilog RTL Coding Guideline\n\n### REFFERENCES\n\n- Michael Keating, \"Reuse Methodology Manual\"\n\n- Mike Turpin, \"The Dangers of Living with an X (bugs hidden in your Verilog)\", ARM ltd.,\nCambridge, UK http://www.arm.com/files/pdf/Verilog_X_Bugs.pdf\n\n- Clifford E. Cummings, \"SystemVerilog's priority & unique -- A solution to Verilog's \"full_case\" & \"parallel_case\" Evil Twins!\" http://www.sunburst-design.com/papers/\n\n### PURPOSE/SCOPE\n\n#### Purpose\n To define a unified set of Verilog RTL coding guidelines for the digital design team. Goals of this include:\n\nCode is more readable by other members of design team\nAvoid pitfalls of synthesizable RTL (i.e. synthesis vs simulation mismatches)\nAid in top level \"stitching together\" of sub-modules designed by various members of the team\n\n\n\n#### Scope\n\n The following guidelines are largely based on the Reuse Methodology Manual (RMM) widely accepted by the industry. Various other resources such as ARM and Cliff Cummings were also referenced as part of this set of guidelines. The idea is to provide enough of a framework to keep coding consistent without smothering each designer's freedom of expression.\n\n### BASIC CODING PRACTICES\n\n3.1.1 General Naming Conventions\n\nUse lowercase letters for all signal names, variable names, and port names\nUse uppercase letters for names of constants and user-defined types\nUse consistent name for the clock signal, such as 'clk'. If there are multiple clocks in the design, use 'clk' as the prefix for all clock signals (i.e. clk1, clk2, or clk_adc, etc.)\nUse the same name for all clock signals driven from the same source\nFor active-low signals, end the signal name with an underscore followed by a lowercase character (i.e. _b or _n). Use the same lowercase underscore character consistently to indicate active-low signals throughout the design.\nUse a consistent name for reset signals (reset or reset_n).\nWhen describing multibit buses, use a consistent ordering of bits such as [x:0]. When possible use these signal naming conventions:\nConventionUseStrictness*_rOutput of a register (i.e. count_r)Discretionary*_aAsynchronous signals (i.e. addr_strobe_a)Discretionary*_dnSignal used in the nth phase/stage/cycle (i.e. enable_d2)Required*_nxtData before being registered into a register with the same\nnameRequired*_zTristate internal signalDiscretionaryModule file names should match the module declaration\nTop level signal naming should be consistent to make top level connections more obvious. For example naming sub-module ports that are to connect with other portions of the design at the higher hierarchical levels with\n<source_module_trigram>_<signal_name>_<destination_module_trigram> (i.e.address bus\nfrom DMA block to the OTP block could be 'dma_addr_otp').\n\n\n\n3.1.2 Include Informational Headers in Source Files\n\n Include a commented, informal header at the top of every source file, including scripts. The header must contain:\no Legal statement: confidentiality, copyright, restrictions, on reproduction\no Filename\no Author\no Description of function and list of key features of the module\no Date the file was created\no Modification history including dat, name of modifier, and description of the change.\n\n3.1.3 Use comments\n\n Use comments appropriately to explain design intent\n Use comments to explain ports, signals, and variables or groups of signals or variables.\nComments should be placed logically, near the code that they describe. Comments should be brief, concise, and explanatory. Insert comments before procedural statements, rather than embedded in it, in order not to interrupt the flow of the code.\n\n3.1.4 Keep Commands on Separate Lines\n\n Use a separate line for each HDL statement.\n\n3.1.5 Line Length\n\n Keep line length to 72 characters or less\n\n3.1.6 Indentation\n\nUse indentation to improve the readability of continued code lines and nested loops.\nUse indentation of 2-4 spaces. Larger indentation (i.e. 8 spaces) restricts line length when there are several levels of nesting.\n Avoid using tabs. Differences in editors and user setups make the position of tabs unpredictable and can corrupt the intended indentation. If using emas with Verilog mode tabs will be replaced with spaces automatically.\n\n3.1.7 Do Not Use HDL Reserved Words\n\n Do not use VHDL or Verilog reserved words for names of any elements in the RTL source files.\n\n3.1.8 Port Ordering\n\nDeclare ports in a logical order, and keep this order consistent throughout the design. Declare one port per line, with a comment following it (preferably on the same line). For each interface, declare the ports in the following order:\no Inputs:\n?????? Clocks\n?????? Resets\n?????? Enables\n?????? Other control signals\n?????? Data and address lines\no Outputs:\n?????? Clocks\n?????? Resets\n?????? Enables\n?????? Other control signals\n?????? Data\n Use comments to describe groups of ports.\n3.1.9 Port Maps and Generic Maps\n\n Always use explicit mapping for ports and generics, using named association rather than positional association.\n\n3.1.10 Use Functions\n\n Use functions when possible, instead of repeating the same sections of code. If possible, generalize the function to make it reusable. For example, if your code frequently converts address data from one format to another, use a function to perform the conversion and call the function whenever you need to.\n\n3.1.11 Use Loops and Arrays\n\nUse loops and arrays for improved readability of the source code. For example describing a shift register, PN-sequence generator, or Johnson counter with a loop construct can greatly reduce the number of lines of source code while still retaining excellent readability\n Arrays are significantly faster to simulate than for loops. To improve simulation performance, use vector operations on arrays rather than for loops whenever possible.\n\n3.1.12 Use Meaningful Labels\n\nLabel each process block with a meaningful name. this is very helpful for debug. For example, you can set a breakpoint by referencing the process label.\n\n3.2 Coding for Portability:\n\n3.2.1 Do Not Use Hard-Coded Numeric Values\n\n Example:\n//Not Recommended\nWire[7:0] my_in_buss;\n\n//Recommended\n`define MY_BUS_SIZE 8 or parameter MY_BUS_SIZE=8; Wire[MY_BUS_SIZE-1 : 0] my_in_bus;\n\nConstants are more intelligible as they associate a design intention with the value\nConstant values can be changed in one place\nCompilers can spot typos in constants but not in hard-coded values.\n\n3.2.2 Constant Definition Files\n\n Keep constant and parameter definitions in one or a small number of files with names such as design_name_constants.v or design_name_parameters.v\nRead pp.98 of RMM. This is conflicting and strange\n3.2.3 Avoid Embedding Synthesis Commands\n\n3.2.4 Use Technology-Independent\n\n3.3 Guidelines for Clocks and Resets\n\n3.3.1 Avoid Mixed Clock Edges\n\n Avoid using both positive-edge and negative-edge triggered flip-flops in the design.\n\n3.3.2 Avoid clock Buffers\n\n Avoid hand instantiating clock buffers in RTL code.\n\n3.3.3 Avoid Gated Clocks\n\n Avoid coding fated clock in RTL.\n\n3.3.4 Avoid Internally Generated Clocks\n\n3.3.5 Gated Clocks and Low-Power Designs\n\n If you must use a gated clock, or an internally generated clock or reset, keep the clock and/or reset generation circuitry as a separate module at the top level of the design. Partition the design so that all logic in a single module uses a single clock and a single reset.\n If your design requires a gated clock, model it in RTL using synchronous load registers. This will allow the synthesis tool to insert the actual clock gating logic.\n\n3.3.6 Avoid Internally Generated Resets\n\n Avoid internally generated, conditional resets if possible. Generally, all the registers in the macro should be reset at the same time.\n If a conditional reset is required, create a separate signal for the reset signal, and isolate the conditional reset logic in a separate module.\n\n3.3.7 Reset Logic Function\n\n The only logic function for the reset signal should be a direct clear of all flip-flops. Never use the reset inputs of a flop to implement a state machine functionality.\n\n3.3.8 Single-Bit Synchronizers\n\n Use two flip-flop stages to transfer single bits between clock domains,.\n\n3.3.9 Multiple-Bit Synchronizers\n\n Do not use multiple copies of a single-bit synchronizer to transfer multiple bit fields (such as FIFO address fields) between clock domains. Instead, use a reliable handshake circuit or multibit coding scheme such as a gray code.\n3.4 Coding for synthesis\n\n3.4.1 Infer Registers\n\n3.4.2 Avoid Latches\n\n As an exception, you can instantiate technology-independent GTECH D latches. However, all latches must be instantiated and you must provide documentation that lists each latch and describes any special timing requirements that result from the latch.\n Avoid inferred latches by using proper coding techniques: having an else for if-then-else statements, using ternary ? operator in continuous statements instead of procedural with sensitivity list, etc. Also new in SystemVerilog is the always_ff and always_comb.\n\n3.4.3 If You Must Use a Latch\n\n Design it such that it is testable (add a MUX to switch between test_in and functional data at the D input with test_mode as the select)\n\n3.4.4 Avoid Combinational Feedback\n\n Avoid combinational feedback; that is the looping of combinational processes.\n\n3.4.5 Specify Complete Sensitivity Lists\n\n3.4.6 Blocking and Nonblocking Assignments\n\n When writing synthesizable code, always use nonblocking assignments in procedural always blocks.\n\n3.4.7 Case Statements vs if-then-else Statements\n\n The multiplexer is a faster circuit. Therefore, if the priority-encoding structure is not required, it is recommended using the case statement rather than and if-then-else statement.\n\n3.4.8 Coding Sequential Logic\n\n Code sequential logic, including state machines, with on sequential process. Improve\nreadability by generating complex intermediate variables outside of the sequential process with assign statements.\nIn SystemVerilog create enumerated types for the state vector\nKeep FSM and non-FSM logic in separate modules if they have different synthesis requirements.\n\n3.4.9 Coding Critical Signals\n\n Keep late-arriving signals with critical timing closest to the output of a logic block. For example, use the late-arriving signal early in an if-else block.\n3.4.10 Avoid Delay Times\n\n Do not use any delay constants in synthesizable RTL code\n\n3.4.11 Avoid full_case and parallel_case Pragmas\n\n Write case statements that cover all cases with no overlap. Do not use the full_case or parallel_case pragmas, because these cause a difference in code interpretation between synthesis and simulation.\n\n3.5 Partitioning for Synthesis\n\n3.5.1 Register All Outputs\n\n For each sub-block of hierarchical macro design, register all output signals from that sub-block.\n\n3.5.2 Locate Related Combinational Logic in a Single Module\n\nKeep related combinational logic together in the same module\n\n3.5.3 Separate Modules That Have Different Design Goals\n\n For instance area optimization vs speed optimization\n\n3.5.4 Asynchronous Logic\n\nAvoid asynchronous logic\nIf asynchronous logic is required in the design, partition the asynchronous logic in a separate module from the synchronous logic.\n\n3.5.5 Arithmetic Operators: Merging Resources\n\n For synthesis tools to consider resource sharing, all relevant resources need to be in the same level of hierarchy that is, within the same module.\n\n3.5.6 Partitioning for Synthesis Runtime\n\n3.5.7 Avoid Timing Exceptions\n\nAvoid multicycle paths and other timing exceptions in your design.\nIf you must use timing exceptions, use start and end points which are guaranteed to exist and be valid at the chip level.\n Avoid false paths in your design, instead use multicycle path\n\n3.5.8 Eliminate Flue Logic at the Top Level\n\n Do not instantiate gate-level logic at the top level of the macro hierarchy.\n3.5.9 Chip-Level Partitioning\n\n Make sure that the top level of the design contains only the I/O pad ring and clock generator.\nThe next level of hierarchy contains JTAG boundary scane modules and the core logic. The clock generation circuitry is isolated from the rest of the design as it is normally hand crafted and carefully simulated.\n\n\n\n\n3.6 Designing with Memories\n\n Keep memory interface pins at the top level of a macrocell to allow user choise of memory implementation , interface, and test.\n Only use synchronous memories for SoC design.\n\n\n\n\n3.7 unwanted affects of X semantics (from ARM: The Dangers of Living with an X)\n\n3.7.1 For if statements\n\nNever use if statements in combinatorial logic (use case or ternary ? instead)\nOnly use if statements for sequential elements (i.e. flip-flop with asynchronous reset) Add X-checking assertions to a clock-gating enables in sequential logic e.g. if (enable)\n\n3.7.2 For casex and casez statements\n\nNever use casex (it's far too dangerous)\nAvoid casez if possible (Z-wildcard doesn't propagate X's)\n\n3.7.3 For case statements\n\nAlways add a default line (to avoid X-latching)\nOnly use the default to assign X's (to avoid X-optimism)\nNever use explicit X's in case items\nCover all reachable 2-state values with case items\nAvoid using case for one-hot multiplexers on critical path (use sum-of-products instead)\n\n3.7.4 Reduce the number of reachable X's\n\nDiscourage the widespread use of X-assignments as synthesis don't-cares\nConsider pre-minimizing essential don't-care X's prior to RTL verification\nAvoid flip-flops that are not reset (only exception should be for large datapath registers)\n\n3.7.5 Avoid synthesis/simulation specific workarounds that change semantics\n\n Never use full_case or parallel_case synthesis pragmas. However SystemVerilog now has priority and unique.\n Avoid translate_off/on pragmas that change RTL simulations (e.g. for casez X-propagation)\n When you cannot follow these rules for any reason, us X-checking assertions and formal property checking to verify RTL.\n\n\n\n\n\n\n","dir":"/wiki/","name":"userguide.md","path":"wiki/userguide.md","url":"/wiki/userguide.html"},{"sort":3,"layout":"default","title":"CUBE-SAT","content":"<h1 id=\"cube-sat\">CUBE-SAT</h1>\n\n<h2 id=\"resources\">Resources</h2>\n<ul>\n <li><a href=\"https://www.nasa.gov/mission_pages/cubesats/index.html\">NASA’s Cube Sat site</a></li>\n <li><a href=\"https://cubesat.org\">cubesat.org</a>: All Cubesat/Testing/Regulatory info can be found here including third-party resources.</li>\n <li><a href=\"https://skyroot.in/\">Skyroot</a>: Bangalore-based aerospace startup as launch vehicle provider including CubeSats.</li>\n <li><a href=\"https://tospace.in\">ToSpace</a>: Bangalore-based aerospace firm focusing on the R&amp;D of <strong>LoRa-based PocketQube</strong> satellite service, dedicated to the promotion of STEM subjects in India.</li>\n</ul>\n\n<h2 id=\"literature\">Literature</h2>\n<ul>\n <li><strong>Articles/Whitepapers/etc</strong>\n <ul>\n <li><a href=\"https://www.nasa.gov/sites/default/files/atoms/files/nasa_csli_cubesat_101_508.pdf\">CubeSat 101</a>: A NASA document for Basic Concepts and Processes for\nFirst-Time CubeSat Developers.</li>\n <li><a href=\"https://spectrum.ieee.org/cubesat\">CubeSat Operators Launch an IoT Space Race</a>: EE Times artice 03/27/2023\n <ul>\n <li>There are some third-party provider links in this article.</li>\n </ul>\n </li>\n <li><a href=\"https://www.nature.com/articles/d41586-023-01281-w\">How CubeSats could harm the ozone layer</a>: Nature artice (04/20/2023) on how use of idoine as thusters could harm ozone.</li>\n </ul>\n </li>\n <li><strong>Books</strong>\n <ul>\n <li><a href=\"https://www.amazon.com/DIY-Satellite-Platforms-Space-Ready-Picosatellite-ebook/dp/B00DBIEYA0/ref=sr_1_1?crid=19R7W0JJ9NQYL&amp;keywords=diy+satellite&amp;qid=1682057446&amp;s=books&amp;sprefix=diy+sateliite%2Cstripbooks-intl-ship%2C815&amp;sr=1-1\">DIY Satellite Platforms</a> : Building a Space-Ready General Base Picosatellite for Any Mission - Sandy Antunes</li>\n <li><a href=\"https://www.amazon.com/DIY-Comms-Control-Amateur-Space-ebook/dp/B00YI2O0X4/ref=sr_1_2?crid=19R7W0JJ9NQYL&amp;keywords=diy+satellite&amp;qid=1682057563&amp;s=books&amp;sprefix=diy+sateliite%2Cstripbooks-intl-ship%2C815&amp;sr=1-2\">DIY Comms and Control for Amateur Space</a>: Talking and Listening to Your Satellite – Sandy Antunes</li>\n <li><a href=\"https://www.amazon.com/Surviving-Orbit-DIY-Way-Satellite/dp/1449310621/ref=sr_1_4?crid=19R7W0JJ9NQYL&amp;keywords=diy+satellite&amp;qid=1682057563&amp;s=books&amp;sprefix=diy+sateliite%2Cstripbooks-intl-ship%2C815&amp;sr=1-4\">Surviving Orbit the DIY Way</a>: Testing the Limits Your Satellite Can and Must Match –Sandy Antunes</li>\n <li><a href=\"https://www.amazon.com/DIY-Instruments-Amateur-Space-Spacecraft/dp/1449310648/ref=sr_1_7?crid=19R7W0JJ9NQYL&amp;keywords=diy+satellite&amp;qid=1682057563&amp;s=books&amp;sprefix=diy+sateliite%2Cstripbooks-intl-ship%2C815&amp;sr=1-7\">DIY Instruments for Amateur Space</a>: Inventing Utility for Your Spacecraft Once It Achieves Orbit – Sandy Antunes</li>\n </ul>\n </li>\n</ul>\n\n","dir":"/wiki/","name":"cube-sat.md","path":"wiki/cube-sat.md","url":"/wiki/cube-sat.html"}]